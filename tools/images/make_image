#!/bin/bash
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2016 Joyent, Inc.
#

#
# This script has been written to be correct without either the "errexit" or
# "pipefail" shell options.  The exit status of all operations is explicitly
# checked, with appropriate handling of errors.
#

PFEXEC=/bin/pfexec
GRUB_FILES=(
	fat_stage1_5
	iso9660_stage1_5
	stage1
	stage2
	stage2_eltorito
	ufs_stage1_5
	zfs_stage1_5
)

g_size=
g_fdisk_file=
g_grub_dir=
g_image_file=
g_lofi_device=
g_lofi_raw=
g_mount_point=
g_tmp_dir=

function warn
{
	local msg="$0: WARNING: $1\\n"
	shift

	printf "$msg" "$@" 2>&1
}

function cleanup
{
	if [[ -n $g_mount_point ]]; then
		if ! $PFEXEC /sbin/umount "$g_mount_point"; then
			warn 'could not unmount %s' "$g_mount_point"
		fi
	fi

	if [[ -n $g_lofi_device ]]; then
		if ! $PFEXEC /usr/sbin/lofiadm -d "$g_lofi_device"; then
			warn 'could not remove lofi device %s' \
			    "$g_lofi_device"
		fi
	fi

	if [[ -n $g_tmp_dir ]]; then
		rm -rf "$g_tmp_dir"
	fi
	if [[ -n $g_image_file ]]; then
		rm -f "$g_image_file"
	fi
}

function fatal
{
	local msg="$0: ERROR: $1\\n"
	shift

	printf "$msg" "$@" 2>&1

	cleanup
	exit 1
}

#
# Option parsing:
#
while getopts 's:F:G:' a; do
	case $a in
	s)
		case $OPTARG in
		1gb|2gb|4gb|8gb)
			g_size=${OPTARG%gb}
			;;
		*)
			fatal 'unknown size (-s): %s' "$OPTARG"
			;;
		esac
		;;
	F)
		if [[ ! -f $OPTARG ]]; then
			fatal 'fdisk table file not found: %s' "$OPTARG"
		fi
		g_fdisk_file=$OPTARG
		;;
	G)
		if [[ ! -d $OPTARG ]]; then
			fatal 'grub directory not found: %s' "$OPTARG"
		fi
		g_grub_dir=$OPTARG
		;;
	*)
		fatal 'usage error'
		exit 1
		;;
	esac
done

shift $(( $OPTIND - 1 ))
if (( $# != 1 )); then
	fatal 'must specify an image file'
	exit 1
fi
g_image_file=$1

if [[ -z $g_image_file || -z $g_size || -z $g_fdisk_file ||
    -z $g_grub_dir ]]; then
	fatal 'usage error: must provide all of -s, -F, and -G'
fi

if [[ -f $g_image_file ]]; then
	printf 'image file exists already\n' >&2
	exit 1
fi

printf '== create proforma image ========================================\n\n'
printf '  output file:     %s\n' "$g_image_file"
printf '  image size:      %d GB\n' "$g_size"
printf '  fdisk template:  %s\n' "$g_fdisk_file"
printf '  grub directory:  %s\n' "$g_grub_dir"

#
# Create a sparse file of the appropriate size.  This size must match that
# which was used to create the fdisk(1M) template, and must be the same size or
# smaller than the target USB drive.
#
printf 'create sparse image file\n'
if ! /usr/sbin/mkfile -n $(( g_size * 1000000000 )) "$g_image_file"; then
	fatal 'could not mkfile'
fi

#
# Attach the blank image file to the system as a lofi(7D) device.
#
printf 'attach image file as lofi(7D) device\n'
if ! g_lofi_device=$($PFEXEC /usr/sbin/lofiadm -a "$g_image_file"); then
	fatal 'could not attach image as lofi(7D) device'
fi

#
# The lofi(7D) device path is for the emulated block device.  We also need the
# path to the emulated character device.
#
g_lofi_raw=${g_lofi_device/#\/dev\/lofi\//\/dev\/rlofi\/}
printf '  lofi device:     %s\n' "$g_lofi_device"
printf '  lofi raw device: %s\n' "$g_lofi_raw"

if [[ ! -b $g_lofi_device || ! -c $g_lofi_raw ]]; then
	fatal 'could not locate lofi(7D) device paths'
fi

printf 'create partition table\n'
if ! $PFEXEC /sbin/fdisk -F "$g_fdisk_file" "$g_lofi_raw"; then
	fatal 'could not make partition table'
fi

#
# Create a FAT32 file system on the first partition of the image.  The volume
# label is set to "HEADNODE".
#
printf 'format FAT32 file system\n'
if ! $PFEXEC /usr/sbin/mkfs -F pcfs -o 'b=HEADNODE,fat=32' "$g_lofi_raw:c" \
    </dev/null; then
	fatal 'could not format FAT32 file system'
fi

#
# Create a temporary directory in which to mount the image to avoid conflicting
# with any other processes.
#
if ! g_tmp_dir=$(mktemp -d); then
	fatal 'could not create temporary directory'
fi

g_mount_point=$g_tmp_dir/mnt
if ! mkdir "$g_mount_point"; then
	fatal 'could not create mount point directory: %s' "$g_mount_point"
fi

#
# Mount the FAT32 file system from the image with the appropriate mount options.
#
printf 'mount FAT32 file system\n'
if ! $PFEXEC /sbin/mount -F pcfs -o 'foldcase,noatime,hidden,clamptime,rw' \
    "$g_lofi_device:c" "$g_mount_point"; then
	fatal 'could not mount file system'
fi

#
# Create the grub directory within the image.
#
if ! mkdir -p "$g_mount_point/boot/grub"; then
	fatal 'could not create grub directory within image'
fi

#
# Copy each grub file from the build area to the image, and create an empty
# grub menu file in the appropriate location.
#
printf 'copying files:\n'
for grub_file in ${GRUB_FILES[@]}; do
	p=boot/grub/$grub_file
	printf '      copy: %s\n' "$p"
	if ! /bin/cp "$g_grub_dir/$p" "$g_mount_point/$p"; then
		fatal 'could not copy %s' "$p"
	fi
done
touch "$g_mount_point/boot/grub/menu.lst"

#
# Unmount the image now, so that we can use the grub shell without upsetting
# the kernel.  Unset the "g_mount_point" variable so that cleanup does not try
# to unmount a second time.
#
printf 'unmounting image\n'
if ! $PFEXEC /sbin/umount "$g_mount_point"; then
	fatal 'could not unmount image file system'
fi
unset g_mount_point

#
# Now that the file system is unmounted, use the grub command to install the
# boot block within the MBR and embed the appropriate stage1_5.
#
printf 'installing grub\n'
$PFEXEC "$g_grub_dir/boot/grub/bin/grub" --batch <<EOFGRUB
device (hd0) $g_lofi_raw
root (hd0,0)
setup (hd0)
quit
EOFGRUB
if [[ $? -ne 0 ]]; then
	fatal 'failed to install grub'
fi

#
# The image was successfully created.  Clean up all of our resources,
# but make sure we do not delete the successfully created image file.
#
unset g_image_file
cleanup
printf '\n'
exit 0
